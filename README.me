#Cesc challenge

Hello. This is my attempt to your challenge. I hope I didn't misunderstand too much, but, in any case,
I believe it is enough to have an idea of how I work. (I might have overdone it a little)

##Dependencies:

To try it you will need PHP composer installed. Check this for more details:
https://getcomposer.org/download/

##Installation

Once you have composer, on this same directory -where this README is- execute: 
`$composer install`

##Usage

### First phase
For the first phase execute

`php PerformTrialEntryPoint.php $CONTRACT$`

where $Contract$ should be a string with the following format:
`[K,N,V]+vs[K,N,V]+` 
The left part of the "vs" represent the plaintiff signatures
The right part of the "vs" represent the defendant signatures.

There should be no spaces in between.

Examples: Plaintiff has a King and a Notary signature and the defendant has 2 validators signatures:

`php PerformTrialEntryPoint.php KNvsVV`

The program should return which party wins.

(ok I just realized I should maybe allow for a party to not have signatures. 
On phase 3 I will do it, right now each party must have at least one signature).

###Second stage

For the second stage the usage is the following:

`php CalculateSignatureEndpoint.php $CONTRACT$`

the contract has the same format as before. Each side can have a "#", but there can only be
one # in the whole contract. (on the first stage, you can also add #, they count as 0).

the program will return the minimum signature needed to at least equal the claim. (It was not
specified if it had to be bigger, so I let it work with an equal value too - that means that
if the side that has the hashtag has already the same score as teh other side, the program
also tells you that that side is already "winning")

*note that if you start with the hashtag you need to add quotes.

Examples:
`$php CalculateSignatureEndpoint.php K#NvsNNNNNV`

This should return "N"

`php CalculateSignatureEndpoint.php '#NVVVVvsKK'`

This one will say it's impossible, we need a "K", but it will invalidate the "V" on that side


### Tests
Use the phpunit from the vendor. To run the tests execute:
`$vendor/phpunit/phpunit/phpunit`

##Comments

1. About the tests I used stubs so even though is a little b cumbersome to create them at the beginning
makes the tests way faster without having to mock thousands of things. I wanted to have a big
coverage that's why I finally decided to go for stubs.

2. I tested about Exceptions but not really about Error Types, it is quite impossible to somehow
reach it with an "int" instead of a "string" for example, but if that were to happen, it would break.
   
3. I didn't use symfony. I wanted for once do something totally framework independent. It would not
be that much lightweight. But I would have had an easier time with making the program
   available to be reached by console/https endpoints and the configurations, that might be the ugliest
   part of what I did.

4. The composer.json is also minimal to have the lightest thing possible.

5. I didn't pay much attention about the phpunit version on the composer. Don't mind it.

